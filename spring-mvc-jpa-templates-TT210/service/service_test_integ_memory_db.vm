#set( $tools = $loader.newInstance("Tools") )
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $fieldLinks = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${TEST_SRC})};

import javax.annotation.Resource;

import org.junit.Assert;
import org.junit.Test;
import ${ENTITY_PKG}.${entity.name};
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entity.name}Id;
#set( $keyType = "${entity.name}Id" )
#set( $keyName = "id" )
#set( $keyGetter = "getId" )
#set( $keySetter = "setId" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.formatedType(0)" )
#set( $keyName = "$field.formatedName(0)" )
#set( $keyGetter = "$field.getter" )
#set( $keySetter = "$field.setter" )
#end
#end

import ${ROOT_PKG}.test.common.AbstractMemoryDBTest;

public class ${entity.name}ServiceMemoryDBIntegTest extends AbstractMemoryDBTest {

	@Override
	protected String getReferentielDataFilename() {
		return null;
	}

	@Override
	protected String getDataFilename() {
		return null;
	}

	@Resource
	private ${entity.name}Service ${entity.name.toLowerCase()}Service;

	@Test
	public void cycle_vie_complet() {

#if ( $entity.hasCompositePrimaryKey() )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = new "+${keyType}+"();" )
#else
#foreach( $field in $entity.keyAttributes )
#if( $field.wrapperType == "String" )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = ""1"";" )
#elseif( $keyType == "Integer" || $keyType == "Long" || $keyType == "Double" || $keyType == "Short" || $keyType == "BigDecimal" || $keyType == "BigInteger" )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = "+${keyType}+".valueOf(""1"");" )
#else
	#set( $keyInit = ${keyType}+" "+${keyName}+" = new "+${keyType}+"();" )
#end
#end
#end
		${keyInit}

		${entity.name} ${entity.name.toLowerCase()} = new ${entity.name}();
		${entity.name.toLowerCase()}.${keySetter}(${keyName});
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#if( $field.isNotNull() )
#if( $tools.isNumber($field) )
		${entity.name.toLowerCase()}.${field.setter}(${field.wrapperType}.valueOf("1"));
#end
#end
#end
#foreach( $link in $tools.links( $entity, $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
		${entity.name.toLowerCase()}.${link.setter}(new ${link.targetEntityType}());
#end

		// Create
		this.${entity.name.toLowerCase()}Service.save(${entity.name.toLowerCase()});

		// Search
		${entity.name.toLowerCase()} = this.${entity.name.toLowerCase()}Service.findById(${keyName});
		Assert.assertNotNull(${entity.name.toLowerCase()});

		// Update
		//${entity.name.toLowerCase()}.setName("Test 2 " + ${keyName});
		${entity.name.toLowerCase()} = this.${entity.name.toLowerCase()}Service.save(${entity.name.toLowerCase()});

		// Search
		${entity.name.toLowerCase()} = this.${entity.name.toLowerCase()}Service.findById(${keyName});
		//Assert.assertEquals("Test 2 " + ${keyName}, ${entity.name.toLowerCase()}.getName());

		// Delete
		this.${entity.name.toLowerCase()}Service.delete(${entity.name.toLowerCase()}.${keyGetter}());

		// Search
		${entity.name.toLowerCase()} = this.${entity.name.toLowerCase()}Service.findById(${keyName});
		Assert.assertNull(${entity.name.toLowerCase()});
	}

}
