package ${target.javaPackageFromFolder(${TEST_SRC})};

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import ${ENTITY_PKG}.${entity.name};
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entity.name}Id;
#set( $keyType = "${entity.name}Id" )
#set( $keyName = "id" )
#set( $keyGetter = "getId" )
#set( $keySetter = "setId" )
#set( $keyInit = ${keyType}+" "+${keyName}+" = new "+${keyType}+"();" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.formatedType(0)" )
#set( $keyName = "$field.formatedName(0)" )
#set( $keyGetter = "$field.getter" )
#set( $keySetter = "$field.setter" )
#if( $keyType == "String" )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = ""test"";" )
#elseif( $keyType == "Integer" || $keyType == "Long" || $keyType == "Double" || $keyType == "Short" || $keyType == "BigDecimal" || $keyType == "BigInteger" )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = "+${keyType}+".valueOf(""1"");" )
#else
	#set( $keyInit = ${keyType}+" "+${keyName}+" = new "+${keyType}+"();" )
#end
#end
#end
import ${ROOT_PKG}.dao.jpa.${entity.name}Dao;
import ${ROOT_PKG}.dao.repository.${entity.name}Repository;

@RunWith(MockitoJUnitRunner.class)
public class ${entity.name}ServiceImplUnitTest {
	
	@InjectMocks
	private ${entity.name}ServiceImpl ${entity.name.toLowerCase()}Service;
	@Mock
	private ${entity.name}Dao ${entity.name.toLowerCase()}Dao;
	@Mock
	private ${entity.name}Repository ${entity.name.toLowerCase()}Repository;
	
	@Test
	public void find() {
		// Given
		${keyInit}

		${entity.name} ${entity.name.toLowerCase()} = new ${entity.name}();
		${entity.name.toLowerCase()}.${keySetter}(${keyName});
		
		when(${entity.name.toLowerCase()}Repository.findOne(${keyName})).thenReturn(${entity.name.toLowerCase()});

		// When
		${entity.name} ${entity.name.toLowerCase()}Result = ${entity.name.toLowerCase()}Service.findById(${keyName});
		
		// Then
		assertEquals(${keyName}, ${entity.name.toLowerCase()}Result.${keyGetter}());
	}

	@Test
	public void findAll() {
		// Given
		List<${entity.name}> ${entity.name.toLowerCase()}s = new ArrayList<${entity.name}>();
		${entity.name.toLowerCase()}s.add(new ${entity.name}());
		
		when(${entity.name.toLowerCase()}Repository.findAll()).thenReturn(${entity.name.toLowerCase()}s);
		
		// When
		List<${entity.name}> ${entity.name.toLowerCase()}sResult = ${entity.name.toLowerCase()}Service.findAll();
		
		// Then
		assertEquals(${entity.name.toLowerCase()}s.size(), ${entity.name.toLowerCase()}sResult.size());
	}
	
	@Test
	public void save() {
		// Given
		${entity.name} ${entity.name.toLowerCase()}ToSave = new ${entity.name}();
		${entity.name} ${entity.name.toLowerCase()}Saved = new ${entity.name}();
		
		when(${entity.name.toLowerCase()}Repository.save(${entity.name.toLowerCase()}ToSave)).thenReturn(${entity.name.toLowerCase()}Saved);

		// When
		${entity.name} ${entity.name.toLowerCase()}Result = ${entity.name.toLowerCase()}Service.save(${entity.name.toLowerCase()}ToSave);
		
		// Then
		assertTrue(${entity.name.toLowerCase()}Result != ${entity.name.toLowerCase()}ToSave);
		assertTrue(${entity.name.toLowerCase()}Result == ${entity.name.toLowerCase()}Saved);
	}

	@Test
	public void delete() {
		// Given
		${keyInit}
		
		// When
		${entity.name.toLowerCase()}Service.delete(${keyName});
		
		// Then
		verify(${entity.name.toLowerCase()}Repository).delete(${keyName});
	}
	
}
