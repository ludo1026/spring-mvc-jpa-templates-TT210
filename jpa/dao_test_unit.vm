#set( $tools = $loader.newInstance("Tools") )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${TEST_SRC})};

import static junit.framework.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import ${ENTITY_PKG}.${entity.name};
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entity.name}Id;
#end
import ${ROOT_PKG}.dao.repository.${entity.name}Repository;

@RunWith(MockitoJUnitRunner.class)
public class ${entity.name}DaoUnitTest {

	@InjectMocks
	private ${entity.name}DaoImpl ${tools.uncapitalize($entity.name)}Dao;
	@Mock
	private ${entity.name}Repository ${tools.uncapitalize($entity.name)}Repository;
	@Mock
	private EntityManager entityManager;
	
	@Test
	public void findByNamedQuery() {
		// Given
		String queryName = "queryName";
		
		List<${entity.name}> ${tools.uncapitalize($entity.name)}s = new ArrayList<${entity.name}>();
		${tools.uncapitalize($entity.name)}s.add(Mockito.mock(${entity.name}.class));
		${tools.uncapitalize($entity.name)}s.add(Mockito.mock(${entity.name}.class));
		
		Query query = mock(Query.class);
		when(entityManager.createNamedQuery(queryName)).thenReturn(query);
		when(query.getResultList()).thenReturn(${tools.uncapitalize($entity.name)}s);
		
		// When
		List<${entity.name}> ${tools.uncapitalize($entity.name)}sResult = ${tools.uncapitalize($entity.name)}Dao.findByNamedQuery(queryName);
		
		// Then
		assertTrue(${tools.uncapitalize($entity.name)}sResult == ${tools.uncapitalize($entity.name)}s);
	}

	@Test
	public void findByNamedQueryWithParameters() {
		// Given
		String queryName = "queryName";
		
		List<${entity.name}> ${tools.uncapitalize($entity.name)}s = new ArrayList<${entity.name}>();
		${tools.uncapitalize($entity.name)}s.add(Mockito.mock(${entity.name}.class));
		${tools.uncapitalize($entity.name)}s.add(Mockito.mock(${entity.name}.class));
		
		Query query = mock(Query.class);
		when(entityManager.createNamedQuery(queryName)).thenReturn(query);
		when(query.getResultList()).thenReturn(${tools.uncapitalize($entity.name)}s);
		
		Map<String, Object> queryParameters = new HashMap<String, Object>();
		
		// When
		List<${entity.name}> ${tools.uncapitalize($entity.name)}sResult = ${tools.uncapitalize($entity.name)}Dao.findByNamedQuery(queryName, queryParameters);
		
		// Then
		assertTrue(${tools.uncapitalize($entity.name)}sResult == ${tools.uncapitalize($entity.name)}s);
	}
	
}
