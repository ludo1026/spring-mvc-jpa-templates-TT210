#set( $tools = $loader.newInstance("Tools") )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};
##--------------------------------------------------------------------------------------------------------
## Informations sur la clé primaire d'une entité
##--------------------------------------------------------------------------------------------------------
## PRIMARY KEY IN URL
## keyURLPath
## keyPathVariable
## keyGetterToArg
#set( $keyURLPath = "")
#set( $keyPathVariable = "")
#set( $keyGetterToArg = "")
#if ( $entity.hasCompositePrimaryKey() )
## FIELDS
#foreach( $field in $entity.keyAttributes )
#if( $keyURLPath != "" ) #set( $keyURLPath = $keyURLPath + "/" ) #end
#if( $keyPathVariable != "" ) #set( $keyPathVariable = $keyPathVariable + ", " ) #end
#if( $keyGetterToArg != "" ) #set( $keyGetterToArg = $keyGetterToArg + ", " ) #end
#set( $keyURLPath = $keyURLPath+"{"+${field.formatedName(0)}+"}" )
#set( $keyPathVariable = $keyPathVariable+"@PathVariable("""+${field.formatedName(0)}+""") "+${field.formatedType(0)}+" "+${field.formatedName(0)} )
#set( $keyGetterToArg = $keyGetterToArg+${entity.name.toLowerCase()}+"."+${tools.keyGetter($entity)}+"()."+${field.getter}+"()" )
#end
#else
#set( $keyURLPath = $keyURLPath+"{"+${tools.keyName($entity)}+"}" )
#set( $keyPathVariable = $keyPathVariable+"@PathVariable("""+${tools.keyName($entity)}+""") "+${tools.keyType($entity)}+" "+${tools.keyName($entity)} )
#set( $keyGetterToArg = $keyGetterToArg+${entity.name.toLowerCase()}+"."+${tools.keyGetter($entity)}+"()" )
#end

import java.util.List;
#foreach( $import in $java.imports($entity) )
import $import;
#end

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;

import javax.validation.Valid;

import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import ${ENTITY_PKG}.${entity.name};
## Cl� primaire
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entity.name}Id;
#end
import ${ROOT_PKG}.service.${entity.name}Service;
import ${ROOT_PKG}.view.manager.${entity.name}EditViewManager;
import ${ROOT_PKG}.view.manager.${entity.name}ListViewManager;
import ${ROOT_PKG}.view.model.${entity.name}EditViewModel;
## Lien vers les entités
#foreach( $link in $entity.selectedLinks )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
import ${ROOT_PKG}.service.${link.targetEntityType}Service;
#end
#end
import ${ROOT_PKG}.web.bean.Message;
import ${ROOT_PKG}.web.bean.TypeMessage;

/**
 * ${entity.name}.
 */
@Controller
@RequestMapping("/${entity.name.toLowerCase()}")
public class ${entity.name}Controller extends AbstractController 
{
	@Resource
    private ${entity.name}Service ${entity.name.toLowerCase()}Service;
	@Resource
    private ${entity.name}ListViewManager ${entity.name.toLowerCase()}ListViewManager;
	@Resource
    private ${entity.name}EditViewManager ${entity.name.toLowerCase()}EditViewManager;

	@RequestMapping()
	public String list(Model model) {
		${entity.name.toLowerCase()}ListViewManager.list(model);
		return "${entity.name.toLowerCase()}/list";
	}

	@RequestMapping("/create")
	public String displayCreate(Model model) {
		model.addAttribute("mode", "create");
		${entity.name.toLowerCase()}EditViewManager.displayCreate(model);
		return "${entity.name.toLowerCase()}/create";
	}

	@RequestMapping(value = "/${keyURLPath}")
	public String displayUpdate(Model model, $keyPathVariable) {
#if ( $entity.hasCompositePrimaryKey() )
		${tools.keyType($entity)} ${tools.keyType($entity).toLowerCase()} = new ${tools.keyType($entity)}();
#foreach( $field in $entity.keyAttributes )
		${tools.keyType($entity).toLowerCase()}.${field.setter}(${field.formatedName(0)});
#end
		${entity.name.toLowerCase()}EditViewManager.displayUpdate(model, ${tools.keyType($entity).toLowerCase()});
#else
		${entity.name.toLowerCase()}EditViewManager.displayUpdate(model, ${tools.keyName($entity)});
#end
		return "${entity.name.toLowerCase()}/update";
	}

	@RequestMapping(method = RequestMethod.POST)
	public String create(@Valid ${entity.name}EditViewModel ${entity.name.toLowerCase()}, BindingResult result, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		try {
			if (!result.hasErrors()) {
				${entity.name.toLowerCase()}EditViewManager.create(model, ${entity.name.toLowerCase()});
				messageHelper.addMessage(redirectAttributes, new Message(TypeMessage.SUCCESS,"save.ok"));
				return "redirect:/${entity.name.toLowerCase()}/"+controllerHelper.encodeUrlPathSegments(httpServletRequest, $keyGetterToArg);
			} else {
				model.addAttribute("mode", "create");
				${entity.name.toLowerCase()}EditViewManager.init(model, ${entity.name.toLowerCase()});
				return "${entity.name.toLowerCase()}/create";
			}
		} catch(Exception e) {
			model.addAttribute("mode", "create");
			messageHelper.addException(model, "${entity.name.toLowerCase()}.error.create", e);
			${entity.name.toLowerCase()}EditViewManager.init(model, ${entity.name.toLowerCase()});
			return "${entity.name.toLowerCase()}/create";
		}
	}

	@RequestMapping(method = RequestMethod.PUT)
	public String update(@Valid ${entity.name}EditViewModel ${entity.name.toLowerCase()}, BindingResult result, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		try {
			if (!result.hasErrors()) {
				${entity.name.toLowerCase()}EditViewManager.update(model, ${entity.name.toLowerCase()});
				messageHelper.addMessage(redirectAttributes, new Message(TypeMessage.SUCCESS,"save.ok"));
				return "redirect:/${entity.name.toLowerCase()}/"+controllerHelper.encodeUrlPathSegments(httpServletRequest, $keyGetterToArg);
			} else {
				${entity.name.toLowerCase()}EditViewManager.init(model, ${entity.name.toLowerCase()});
				return "${entity.name.toLowerCase()}/update";
			}
		} catch(Exception e) {
			messageHelper.addException(model, "${entity.name.toLowerCase()}.error.update", e);
			${entity.name.toLowerCase()}EditViewManager.init(model, ${entity.name.toLowerCase()});
			return "${entity.name.toLowerCase()}/update";
		}
	}

	@RequestMapping(value = "/delete/${keyURLPath}")
	public String delete(RedirectAttributes redirectAttributes, $keyPathVariable) {
		try {
#if ( $entity.hasCompositePrimaryKey() )
			${tools.keyType($entity)} ${tools.keyType($entity).toLowerCase()} = new ${tools.keyType($entity)}();
#foreach( $field in $entity.keyAttributes )
			${tools.keyType($entity).toLowerCase()}.${field.setter}(${field.formatedName(0)});
#end
			${entity.name.toLowerCase()}ListViewManager.delete(${tools.keyType($entity).toLowerCase()});
#else
			${entity.name.toLowerCase()}ListViewManager.delete(${tools.keyName($entity)});
#end
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "${entity.name.toLowerCase()}.error.delete", e);
		}
		return "redirect:/${entity.name.toLowerCase()}";
	}
	
}
