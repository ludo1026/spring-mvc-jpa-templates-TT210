#set( $tools = $loader.newInstance("Tools") )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${TEST_SRC})};

import javax.annotation.Resource;

import org.junit.Assert;
import org.junit.Test;
import ${ENTITY_PKG}.${entity.name};
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entity.name}Id;
#set( $keyType = "${entity.name}Id" )
#set( $keyName = "id" )
#set( $keyGetter = "getId" )
#set( $keySetter = "setId" )
#set( $keyInit = ${keyType}+" "+${keyName}+" = new "+${keyType}+"();" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.formatedType(0)" )
#set( $keyName = "$field.formatedName(0)" )
#set( $keyGetter = "$field.getter" )
#set( $keySetter = "$field.setter" )
#if( $keyType == "String" )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = ""1"";" )
#elseif( $keyType == "Integer" || $keyType == "Long" || $keyType == "Double" || $keyType == "Short" || $keyType == "BigDecimal" || $keyType == "BigInteger" )
	#set( $keyInit = ${keyType}+" "+${keyName}+" = "+${keyType}+".valueOf(""1"");" )
#else
	#set( $keyInit = ${keyType}+" "+${keyName}+" = new "+${keyType}+"();" )
#end
#end
#end

import ${ROOT_PKG}.test.common.AbstractRealDBTest;

public class ${entity.name}ServiceRealDBIntegTest extends AbstractRealDBTest {

	@Override
	protected String getDataFilename() {
		return null;
	}

	@Resource
	private ${entity.name}Service ${tools.uncapitalize($entity.name)}Service;

	@Test
	public void cycle_vie_complet() {

		${keyInit}

		${entity.name} ${tools.uncapitalize($entity.name)} = new ${entity.name}();
		${tools.uncapitalize($entity.name)}.${keySetter}(${keyName});
		//${tools.uncapitalize($entity.name)}.setName("Test " + ${keyName});

		// Create
		this.${tools.uncapitalize($entity.name)}Service.save(${tools.uncapitalize($entity.name)});

		// Search
		${tools.uncapitalize($entity.name)} = this.${tools.uncapitalize($entity.name)}Service.findById(${keyName});
		Assert.assertNotNull(${tools.uncapitalize($entity.name)});

		// Update
		//${tools.uncapitalize($entity.name)}.setName("Test 2 " + ${keyName});
		${tools.uncapitalize($entity.name)} = this.${tools.uncapitalize($entity.name)}Service.save(${tools.uncapitalize($entity.name)});

		// Search
		${tools.uncapitalize($entity.name)} = this.${tools.uncapitalize($entity.name)}Service.findById(${keyName});
		//Assert.assertEquals("Test 2 " + ${keyName}, ${tools.uncapitalize($entity.name)}.getName());

		// Delete
		this.${tools.uncapitalize($entity.name)}Service.delete(${tools.uncapitalize($entity.name)}.${keyGetter}());

		// Search
		${tools.uncapitalize($entity.name)} = this.${tools.uncapitalize($entity.name)}Service.findById(${keyName});
		Assert.assertNull(${tools.uncapitalize($entity.name)});
	}

}
