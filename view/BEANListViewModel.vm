#set( $tools = $loader.newInstance("Tools") )
##--------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $fieldsLink = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Mapped fields = fields in Primary Key or not in selected Links    
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

#if ( $entity.hasCompositePrimaryKey() )
import javax.validation.Valid;
#end
import javax.validation.constraints.*;

#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entity.name}Id;
#end

#foreach( $import in $java.imports($entity) )
import $import;
#end

## Lien vers les entit√©s
#foreach( $link in $entity.selectedLinks )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() )
import ${ROOT_PKG}.mapping.item.Item${link.targetEntityType};
#end
#end

public class ${entity.name}ListViewModel implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
    private ${entity.name}Id id = new ${entity.name}Id();

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
    private $field.formatedType(0) $field.formatedName(0);
#end

#end
    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
    private $field.formatedType(0) $field.formatedName(0);

#end
    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#if( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
#set( $entityLink = $model.getEntityByClassName($link.targetEntityType) )
    private Item${entityLink.name} ${link.formatedName(0)} = new Item${entityLink.name}();

#end
#end
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
	public ${entity.name}Id getId() {
        return id;
    }
 
    public void setId(${entity.name}Id id) {
        this.id = id;
    }

#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.formatedType(0) $field.name )
    {
        this.id.${field.setter}( $field.name ) ;
    }

#end
#if ( $field.getter )    public $field.formatedType(0) ${field.getter}()
    {
        return this.id.${field.getter}() ;
    }

#end
#end
#else 

    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )
    public void ${field.setter}( $field.formatedType(0) $field.name )
    {
        this.$field.name = $field.name ;
    }

#end
#if ( $field.getter )
    public $field.formatedType(0) ${field.getter}()
    {
        return this.$field.name;
    }

#end
#end
#end
    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
#if ( $field.setter )
    public void ${field.setter}( $field.formatedType(0) $field.name )
    {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )
    public $field.formatedType(0) ${field.getter}()
    {
        return this.$field.name;
    }
#end

#end  

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#if( $link.isCardinalityManyToOne() )
#set( $entityLink = $model.getEntityByClassName($link.targetEntityType) )
#if ( $link.setter )
    public void set${tools.capitalize($link.formatedName(0))}( Item${entityLink.name} ${link.formatedName(0)} )
    {
        this.${link.formatedName(0)} = ${link.formatedName(0)};
    }
#end
#if ( $link.getter )
    public Item${entityLink.name} get${tools.capitalize($link.formatedName(0))}()
    {
        return this.${link.formatedName(0)};
    }
#end

#end
#end 

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
#set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT, $const.NOT_IN_SELECTED_LINKS ) )    
$java.toStringMethod($entity, $attributes, "id", 4) 

}
